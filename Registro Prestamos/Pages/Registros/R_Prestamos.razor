@page "/Prestamo"

@using Registro_Prestamos.BLL
@using Registro_Prestamos.Models

@inject IToastService toast

<EditForm Model="prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">

        <div class="card-header">
            <h2>Registro de Prestamo</h2>
        </div>

        <div class="card-body">
            <form>
                <label for="Id">ID:</label>
                <div class="input-group">
                    <InputNumber @bind-Value="prestamo.PretamoId" class="form-control"></InputNumber>
                    <ValidationMessage For="@(() => prestamo.PretamoId)"></ValidationMessage>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="icon-search"></span>Buscar</button>
                    </div>
                </div>

                @*Persona*@
                <div class="form-group">
                    <label for="persona_select">Persona:</label>
                    <select id="persona_select" @bind="prestamo.PersonaId" class="form-control">
                        <option value="" disabled selected>Elija una Persona</option>
                        @foreach (var item in listaPersona)
                        {
                            <option value="@item.PersonaId">@item.Nombre</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="Fecha">Fecha:</label>
                    <InputDate @bind-Value="prestamo.Fecha" class="form-control"></InputDate>
                    <ValidationMessage For="@(() => prestamo.Fecha)"></ValidationMessage>
                </div>


                <div class="form-group">
                    <label for="Concepto">Concepto:</label>
                    <InputText @bind-Value="prestamo.Concepto" class="form-control"></InputText>
                    <ValidationMessage For="@(() => prestamo.Concepto)"></ValidationMessage>
                </div>

                <div class="from-group">
                    <label for="Monto">Monto:</label>
                    <InputNumber @bind-Value="prestamo.Monto" class="form-control" step="00.2"></InputNumber>
                    <ValidationMessage For="(() => prestamo.Monto)"></ValidationMessage>
                </div>

                <div class="from-group">
                    <label for="Balance">Balance:</label>
                    <InputNumber @bind-Value="prestamo.Balance" class="form-control" step="00.2"></InputNumber>
                    <ValidationMessage For="(() => prestamo.Balance)"></ValidationMessage>

                </div>
            </form>
        </div>
        <div class="card-footer">
            <div class="form-group text-lg-center">
                <button type="button" class="btn btn-secondary" @onclick="Nuevo"><span class="icon-add"></span> Nuevo </button>
                <button type="submit" class="btn btn-success" @onclick="Guardar"><span class="icon-save"></span> Guardar </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="icon-delete_forever"></span> Eliminar </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public int PrestamoId { get; set; }

    public Prestamo prestamo { get; set; }


    private List<Persona> listaPersona = new List<Persona>();

    private void Nuevo()
    {
        prestamo = new Prestamo();
    }

    protected override void OnInitialized()
    {
        Nuevo();
        if (PrestamoId > 0)
        {
            var auxPretamo = PrestamosBLL.Buscar(PrestamoId);
            if (auxPretamo != null)
                this.prestamo = auxPretamo;
            else
                toast.ShowWarning("No encontrado.");
        }

        listaPersona = PersonaBLL.GetList(p => true);
    }
    private void Guardar()
    {
        bool guardar;
        guardar = PrestamosBLL.Guardar(prestamo);

        if (guardar)
        {

            Nuevo();
            toast.ShowSuccess("prestamo Registrado");
        }
        else
        {
            toast.ShowSuccess("Error no Fue posible Guardar");

        }

    }

  

    private void Buscar()
    {

        var encontrado = PrestamosBLL.Buscar(prestamo.PretamoId);
        if (encontrado != null)
        {
            this.prestamo = encontrado;
        }
        else
            toast.ShowSuccess("No existe esta Prestamo.");

    }

    private void Eliminar()
    {
        bool eliminar;
        eliminar = PrestamosBLL.Eliminar(prestamo.PretamoId);

        if (eliminar)
        {
            Nuevo();
            toast.ShowSuccess("Prestamo Eliminado");
        }
        else
        {
            toast.ShowError("El prestamo que intento eliminar no Existe.");

        }

        
    }
}
